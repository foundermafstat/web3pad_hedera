'use client';

import { useState, useEffect } from 'react';
import { Alert, AlertDescription } from './ui/alert';
import { Button } from './ui/button';
import { ExternalLink, Download, CheckCircle, AlertCircle } from 'lucide-react';

interface HashPackDetectorProps {
  onWalletDetected?: (walletType: string) => void;
  onWalletNotFound?: () => void;
}

export function HashPackDetector({ onWalletDetected, onWalletNotFound }: HashPackDetectorProps) {
  const [walletStatus, setWalletStatus] = useState<'checking' | 'found' | 'not-found'>('checking');
  const [detectedWallets, setDetectedWallets] = useState<string[]>([]);

  useEffect(() => {
    checkForWallets();
  }, []);

  const checkForWallets = () => {
    const wallets: string[] = [];
    
    if (typeof window !== 'undefined') {
      console.log('üîç Checking for Hedera wallets...');
      console.log('Window object:', window);
      console.log('HashPack available:', !!(window as any).hashpack);
      console.log('Blade available:', !!(window as any).blade);
      console.log('Yamgo available:', !!(window as any).yamgo);
      console.log('Hedera available:', !!(window as any).hedera);
      
      // Check for HashPack
      if ((window as any).hashpack) {
        console.log('‚úÖ HashPack detected');
        wallets.push('HashPack');
        
        // Check if HashPack is connected
        try {
          const isConnected = (window as any).hashpack.isConnected();
          console.log('HashPack connected:', isConnected);
          
          if (isConnected) {
            const account = (window as any).hashpack.getAccount();
            console.log('HashPack account:', account);
          }
        } catch (error) {
          console.error('Error checking HashPack status:', error);
        }
      }
      
      // Check for Blade
      if ((window as any).blade) {
        console.log('‚úÖ Blade detected');
        wallets.push('Blade');
      }
      
      // Check for Yamgo
      if ((window as any).yamgo) {
        console.log('‚úÖ Yamgo detected');
        wallets.push('Yamgo');
      }
      
      // Check for generic Hedera wallet
      if ((window as any).hedera) {
        console.log('‚úÖ Generic Hedera wallet detected');
        wallets.push('Hedera');
      }
    }
    
    console.log('Detected wallets:', wallets);
    setDetectedWallets(wallets);
    
    if (wallets.length > 0) {
      setWalletStatus('found');
      if (onWalletDetected) {
        onWalletDetected(wallets[0]); // Use first detected wallet
      }
    } else {
      setWalletStatus('not-found');
      if (onWalletNotFound) {
        onWalletNotFound();
      }
    }
  };

  const openHashPackInstall = () => {
    window.open('https://hashpack.app/', '_blank');
  };

  const openBladeInstall = () => {
    window.open('https://blade.portal.hedera.com/', '_blank');
  };

  const openYamgoInstall = () => {
    window.open('https://yamgo.com/', '_blank');
  };

  const refreshWalletCheck = () => {
    console.log('üîÑ Refreshing wallet check...');
    checkForWallets();
  };

  if (walletStatus === 'checking') {
    return (
      <Alert className="bg-blue-500/20 border-blue-500/30">
        <AlertCircle className="h-4 w-4 text-blue-400" />
        <AlertDescription className="text-blue-400">
          –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è Hedera –∫–æ—à–µ–ª—å–∫–æ–≤...
        </AlertDescription>
      </Alert>
    );
  }

  if (walletStatus === 'found') {
    return (
      <Alert className="bg-green-500/20 border-green-500/30">
        <CheckCircle className="h-4 w-4 text-green-400" />
        <AlertDescription className="text-green-400">
          ‚úÖ –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –∫–æ—à–µ–ª—å–∫–∏: {detectedWallets.join(', ')}
        </AlertDescription>
      </Alert>
    );
  }

  return (
    <div className="space-y-4">
      <Alert className="bg-yellow-500/20 border-yellow-500/30">
        <AlertCircle className="h-4 w-4 text-yellow-400" />
        <AlertDescription className="text-yellow-400">
          ‚ö†Ô∏è Hedera –∫–æ—à–µ–ª–µ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω. –î–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Å–≤–∞–ø–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∫–æ—à–µ–ª–µ–∫.
        </AlertDescription>
      </Alert>

      <div className="space-y-3">
        <h4 className="text-sm font-medium text-white">–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ –∫–æ—à–µ–ª—å–∫–∏:</h4>
        
        {/* HashPack */}
        <div className="flex items-center justify-between p-3 bg-white/5 rounded-lg border border-white/10">
          <div className="flex items-center gap-3">
            <div className="w-8 h-8 bg-gradient-to-br from-blue-500 to-purple-600 rounded-lg flex items-center justify-center">
              <span className="text-white text-xs font-bold">HP</span>
            </div>
            <div>
              <h5 className="text-sm font-medium text-white">HashPack</h5>
              <p className="text-xs text-gray-400">–°–∞–º—ã–π –ø–æ–ø—É–ª—è—Ä–Ω—ã–π Hedera –∫–æ—à–µ–ª–µ–∫</p>
            </div>
          </div>
          <Button
            size="sm"
            onClick={openHashPackInstall}
            className="bg-blue-600 hover:bg-blue-700"
          >
            <Download className="w-3 h-3 mr-1" />
            –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å
          </Button>
        </div>

        {/* Blade */}
        <div className="flex items-center justify-between p-3 bg-white/5 rounded-lg border border-white/10">
          <div className="flex items-center gap-3">
            <div className="w-8 h-8 bg-gradient-to-br from-orange-500 to-red-600 rounded-lg flex items-center justify-center">
              <span className="text-white text-xs font-bold">B</span>
            </div>
            <div>
              <h5 className="text-sm font-medium text-white">Blade</h5>
              <p className="text-xs text-gray-400">–û—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π –∫–æ—à–µ–ª–µ–∫ Hedera</p>
            </div>
          </div>
          <Button
            size="sm"
            onClick={openBladeInstall}
            className="bg-orange-600 hover:bg-orange-700"
          >
            <ExternalLink className="w-3 h-3 mr-1" />
            –û—Ç–∫—Ä—ã—Ç—å
          </Button>
        </div>

        {/* Yamgo */}
        <div className="flex items-center justify-between p-3 bg-white/5 rounded-lg border border-white/10">
          <div className="flex items-center gap-3">
            <div className="w-8 h-8 bg-gradient-to-br from-green-500 to-teal-600 rounded-lg flex items-center justify-center">
              <span className="text-white text-xs font-bold">Y</span>
            </div>
            <div>
              <h5 className="text-sm font-medium text-white">Yamgo</h5>
              <p className="text-xs text-gray-400">–í–µ–±-–∫–æ—à–µ–ª–µ–∫ –¥–ª—è Hedera</p>
            </div>
          </div>
          <Button
            size="sm"
            onClick={openYamgoInstall}
            className="bg-green-600 hover:bg-green-700"
          >
            <ExternalLink className="w-3 h-3 mr-1" />
            –û—Ç–∫—Ä—ã—Ç—å
          </Button>
        </div>
      </div>

      <div className="text-xs text-gray-400 space-y-1">
        <p>‚Ä¢ –ü–æ—Å–ª–µ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∫–æ—à–µ–ª—å–∫–∞ –æ–±–Ω–æ–≤–∏—Ç–µ —Å—Ç—Ä–∞–Ω–∏—Ü—É</p>
        <p>‚Ä¢ –ü–æ–¥–∫–ª—é—á–∏—Ç–µ –∫–æ—à–µ–ª–µ–∫ –∫ Hedera Testnet</p>
        <p>‚Ä¢ –ê–≤—Ç–æ—Ä–∏–∑—É–π—Ç–µ—Å—å —á–µ—Ä–µ–∑ –∫–æ—à–µ–ª–µ–∫ –≤ —Å–∏—Å—Ç–µ–º–µ</p>
      </div>

      <div className="mt-4">
        <Button
          size="sm"
          onClick={refreshWalletCheck}
          className="w-full bg-gray-600 hover:bg-gray-700"
        >
          üîÑ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∫–æ—à–µ–ª—å–∫–∏ —Å–Ω–æ–≤–∞
        </Button>
      </div>
    </div>
  );
}
